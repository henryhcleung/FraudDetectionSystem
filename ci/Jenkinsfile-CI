pipeline {
    agent { label 'microservice-build-agent-1' }
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Environment to build for')
    }
    
    environment {
        JAVA_HOME = tool 'JDK17'
        MAVEN_HOME = tool 'maven-3.8.4'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"
        ARTIFACT_NAME = 'FraudDetectionSystem-1.0-SNAPSHOT.jar'
        DOCKER_IMAGE = 'fraud-detection-system'
        DOCKER_TAG = "${env.BUILD_NUMBER}-${params.ENV}"
        SONAR_PROJECT_KEY = 'henryhcleung_FraudDetectionSystem'
    }
    
    options {
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    triggers {
        cron('0 0 * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                sh """
                    mvn clean install -DskipTests
                    mvn test
                """
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarCloud') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY}"
                }
            }
        }
        
        stage('Dependency Check') {
            steps {
                sh "mvn org.owasp:dependency-check-maven:check"
            }
            post {
                always {
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        customImage.push()
                        customImage.push("latest-${params.ENV}")
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'CI pipeline completed successfully!'
        }
        failure {
            echo 'CI pipeline failed!'
            mail to: 'henryleunghc@gmail.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}