pipeline {
    agent { label 'microservice-build-agent-1' }
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Environment to build for')
    }
    
    environment {
        JAVA_VERSION = 'JDK17'
        MAVEN_VERSION = 'maven-3.8.4'
        JAVA_HOME = tool(name: "${JAVA_VERSION}", type: 'jdk')
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        ARTIFACT_NAME = 'FraudDetectionSystem-1.0-SNAPSHOT.jar'
        DOCKER_IMAGE = 'fraud-detection-system'
        DOCKER_TAG = "${env.BUILD_NUMBER}-${params.ENV}"
        SONAR_PROJECT_KEY = 'henryhcleung_FraudDetectionSystem'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    
    triggers {
        cron('0 0 * * *') // Daily at midnight UTC
    }
    
    tools {
        jdk "${JAVA_VERSION}" // Ensure this matches the name in Jenkins Global Tool Configuration
        maven "${MAVEN_VERSION}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: "*/${params.BRANCH}"]], 
                    userRemoteConfigs: [[url: 'https://github.com/henryhcleung/FraudDetectionSystem.git']],
                    extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]]
                ])
            }
        }
        
        stage('Build and Analyze') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        mvn -B -s custom-settings.xml verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.organization=henryhcleung \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh 'mvn -s custom-settings.xml test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                sh 'mvn -s custom-settings.xml verify -DskipUnitTests'
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                sh './scripts/performance-tests.sh'
            }
        }
        
        stage('Smoke Tests') {
            steps {
                sh './scripts/smoke-tests.sh'
            }
        }
        
        stage('Code Coverage') {
            steps {
                sh 'mvn -s custom-settings.xml jacoco:report'
                publishHTML(target: [
                    reportDir: 'target/site/jacoco',
                    reportFiles: 'index.html',
                    reportName: 'JaCoCo Code Coverage'
                ])
            }
        }
        
        stage('Dependency Check') {
            steps {
                sh './scripts/dependency-check.sh'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'target',
                    reportFiles: 'dependency-check-report.html',
                    reportName: 'Dependency Check Report'
                ])
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        customImage.push()
                        customImage.push("latest-${params.ENV}")
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'CI pipeline completed successfully!'
        }
        failure {
            echo 'CI pipeline failed!'
            mail to: 'henryleunghc@gmail.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}