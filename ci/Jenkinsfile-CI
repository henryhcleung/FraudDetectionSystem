pipeline {
    agent { label 'microservice-build-agent-1' }
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Environment to build for')
    }
    
    environment {
        SDKMAN_DIR = "${env.WORKSPACE}/.sdkman"
        JAVA_HOME = "${SDKMAN_DIR}/candidates/java/current"
        MAVEN_HOME = tool name: 'maven-3.8.4', type: 'maven'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"
        ARTIFACT_NAME = 'FraudDetectionSystem-1.0-SNAPSHOT.jar'
        DOCKER_IMAGE = 'fraud-detection-system'
        DOCKER_TAG = "${env.BUILD_NUMBER}-${params.ENV}"
        SONAR_PROJECT_KEY = 'henryhcleung_FraudDetectionSystem'
    }
    
    options {
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    triggers {
        cron('0 0 * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "*/${params.BRANCH}"]],
                          userRemoteConfigs: [[url: 'https://github.com/henryhcleung/FraudDetectionSystem.git',
                                              credentialsId: 'github-credentials']]])
            }
        }
        
        stage('Install SDKMAN and Java') {
            steps {
                sh '''
                    if [ ! -d "${SDKMAN_DIR}" ]; then
                        curl -s "https://get.sdkman.io" | bash
                        source "${SDKMAN_DIR}/bin/sdkman-init.sh"
                        sdk install java 17.0.12-jbr
                    fi
                    source "${SDKMAN_DIR}/bin/sdkman-init.sh"
                    sdk use java 17.0.12-jbr
                '''
            }
        }
        
        stage('Build and Test') {
            steps {
                withMaven(maven: 'maven-3.8.4') {
                    sh "mvn clean package"
                    sh "mvn test"
                }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }
        
        stage('Dependency Check') {
            steps {
                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                    sh '''
                        mvn dependency-check:purge
                        mvn dependency-check:check \
                        -Dnvd.apiKey=${NVD_API_KEY}
                    '''
                }
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        customImage.push()
                        customImage.push("latest-${params.ENV}")
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'CI pipeline completed successfully!'
        }
        failure {
            echo 'CI pipeline failed!'
            mail to: 'henryleunghc@gmail.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}