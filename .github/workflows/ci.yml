name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Verify JAR file exists
        run: test -f target/FraudDetectionSystem-1.0-SNAPSHOT.jar && echo "JAR file exists" || echo "JAR file does not exist"

  jenkins-jobs:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Run Jenkins in Docker
        run: |
          docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts
          # Wait for Jenkins to start
          until $(curl --output /dev/null --silent --head --fail http://localhost:8080); do
            printf '.'
            sleep 5
          done

      - name: Get Jenkins initial admin password
        run: |
          JENKINS_PASSWORD=$(docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword)
          echo "JENKINS_PASSWORD=$JENKINS_PASSWORD" >> $GITHUB_ENV

      - name: Install Jenkins plugins
        run: |
          docker exec jenkins jenkins-plugin-cli --plugins workflow-aggregator git

      - name: Create Jenkins jobs
        run: |
          # Create complex-build job
          curl -X POST 'http://localhost:8080/createItem?name=complex-build' \
            --user "admin:${{ env.JENKINS_PASSWORD }}" \
            --header "Content-Type: application/xml" \
            --data-binary @jenkins-jobs/complex-build.xml

          # Create legacy-integration job
          curl -X POST 'http://localhost:8080/createItem?name=legacy-integration' \
            --user "admin:${{ env.JENKINS_PASSWORD }}" \
            --header "Content-Type: application/xml" \
            --data-binary @jenkins-jobs/legacy-integration.xml

          # Create security-scan job
          curl -X POST 'http://localhost:8080/createItem?name=security-scan' \
            --user "admin:${{ env.JENKINS_PASSWORD }}" \
            --header "Content-Type: application/xml" \
            --data-binary @jenkins-jobs/security-scan.xml

      - name: Run Jenkins jobs
        run: |
          # Run complex-build job
          curl -X POST 'http://localhost:8080/job/complex-build/build' \
            --user "admin:${{ env.JENKINS_PASSWORD }}"
          
          # Run legacy-integration job
          curl -X POST 'http://localhost:8080/job/legacy-integration/build' \
            --user "admin:${{ env.JENKINS_PASSWORD }}"
          
          # Run security-scan job
          curl -X POST 'http://localhost:8080/job/security-scan/build' \
            --user "admin:${{ env.JENKINS_PASSWORD }}"

      - name: Wait for Jenkins jobs to complete
        run: |
          for job in complex-build legacy-integration security-scan; do
            while true; do
              STATUS=$(curl -s "http://localhost:8080/job/$job/lastBuild/api/json" \
                --user "admin:${{ env.JENKINS_PASSWORD }}" | jq -r '.result')
              if [ "$STATUS" = "SUCCESS" ]; then
                echo "$job completed successfully"
                break
              elif [ "$STATUS" = "FAILURE" ]; then
                echo "$job failed"
                exit 1
              fi
              sleep 10
            done
          done

  docker-build-push:
    needs: jenkins-jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/frauddetectionsystem:latest .

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frauddetectionsystem:latest

  deploy-and-test:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Run integration tests
        run: mvn verify

      - name: Run end-to-end tests
        run: |
          npm install -g newman
          newman run tests/postman_collection.json

  notify:
    runs-on: ubuntu-latest
    needs: deploy-and-test
    if: failure()
    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Build Notification
          to: henryleungdemotest@gmail.com
          from: github-actions@gmail.com
          body: |
            Build Notification

            The build has completed successfully.

            **Repository**: ${{ github.repository }}
            **Branch**: ${{ github.ref }}
            **Commit**: ${{ github.sha }}
            **Commit Message**: ${{ github.event.head_commit.message }}
            **Author**: ${{ github.event.head_commit.author.name }}
            **Build URL**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please check the logs for more details.