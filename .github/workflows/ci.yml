name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

env:
  JAVA_VERSION: '11'
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frauddetectionsystem
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'
          cache: maven
      - name: Build and test
        run: |
          mvn -B clean package --file pom.xml -s custom-settings.xml
          mvn test -s custom-settings.xml
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FraudDetectionSystem
          path: target/FraudDetectionSystem-*.jar

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'FraudDetectionSystem'
          path: '.'
          format: 'HTML'
      - name: Upload OWASP Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ${{github.workspace}}/reports

  jenkins-integration:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Check Jenkins configuration
        run: |
          if [ -z "$JENKINS_URL" ] || [ -z "$JENKINS_USER" ] || [ -z "$JENKINS_TOKEN" ]; then
            echo "Warning: Jenkins configuration is incomplete. Skipping Jenkins integration."
            echo "To enable Jenkins integration, set JENKINS_URL, JENKINS_USER, and JENKINS_TOKEN in your GitHub secrets."
            exit 0
          fi
      - name: Trigger Jenkins job
        if: env.JENKINS_URL != '' && env.JENKINS_USER != '' && env.JENKINS_TOKEN != ''
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${JENKINS_URL}/job/complex-build/build" \
            --user "${JENKINS_USER}:${JENKINS_TOKEN}" \
            --data-urlencode json='{"parameter": [{"name":"BRANCH", "value":"${{ github.ref }}"}]}')
          if [ "$response" != "201" ]; then
            echo "Failed to trigger Jenkins job. HTTP status: $response"
            exit 1
          fi
      - name: Wait for Jenkins job completion
        if: env.JENKINS_URL != '' && env.JENKINS_USER != '' && env.JENKINS_TOKEN != ''
        run: |
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            status=$(curl -s "${JENKINS_URL}/job/complex-build/lastBuild/api/json" \
              --user "${JENKINS_USER}:${JENKINS_TOKEN}" | jq -r '.result')
            if [ "$status" = "SUCCESS" ]; then
              echo "Jenkins job completed successfully"
              exit 0
            elif [ "$status" = "FAILURE" ] || [ "$status" = "ABORTED" ]; then
              echo "Jenkins job failed or was aborted"
              exit 1
            fi
            attempt=$((attempt+1))
            sleep 20
          done
          echo "Timeout waiting for Jenkins job completion"
          exit 1

  docker-build-push:
    needs: [build-and-test, security-scan, jenkins-integration]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-staging:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/frauddetection frauddetection=${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  integration-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run integration tests
        run: |
          npm install -g newman
          newman run tests/integration-tests.json

  deploy-production:
    needs: integration-tests
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Deploy to production
        run: |
          kubectl apply -f k8s/production/
          kubectl set image deployment/frauddetection frauddetection=${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  notify:
    if: failure()
    needs: 
      - build-and-test
      - security-scan
      - jenkins-integration
      - docker-build-push
      - deploy-staging
      - integration-tests
      - deploy-production
    runs-on: ubuntu-latest
    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Build Notification - Failure in ${{ github.workflow }}
          to: henryleungdemotest@gmail.com
          from: github-actions@gmail.com
          body: |
            Build Notification

            The build has failed in the ${{ github.workflow }} workflow.

            **Repository**: ${{ github.repository }}
            **Branch**: ${{ github.ref }}
            **Commit**: ${{ github.sha }}
            **Commit Message**: ${{ github.event.head_commit.message }}
            **Author**: ${{ github.event.head_commit.author.name }}
            **Build URL**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please check the logs for more details.