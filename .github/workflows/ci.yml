name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

env:
  JAVA_VERSION: '11'
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frauddetectionsystem
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'
          cache: maven
      - name: Build and test
        run: |
          mvn -B clean package --file pom.xml -s custom-settings.xml
          mvn test -s custom-settings.xml
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FraudDetectionSystem
          path: target/FraudDetectionSystem-*.jar

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'FraudDetectionSystem'
          path: '.'
          format: 'HTML'
      - name: Upload OWASP Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ${{github.workspace}}/reports

  docker-build-push:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: FraudDetectionSystem
          path: target
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-and-test:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
      - name: Deploy to local Kubernetes
        run: |
          minikube start --memory=4096 --cpus=2
          kubectl apply -f k8s/
          kubectl set image deployment/fraud-detection-system fraud-detection-system=${{ env.DOCKER_IMAGE }}:${{ github.sha }}
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl rollout status deployment/fraud-detection-system --timeout=300s
      - name: Check deployment status
        run: |
          kubectl get deployments,pods,services
          kubectl describe pods
          kubectl logs -l app=fraud-detection-system --all-containers=true --tail=100
          kubectl get events --sort-by=.metadata.creationTimestamp
      - name: Check for failed pods
        run: |
          FAILED_PODS=$(kubectl get pods --field-selector=status.phase!=Running -o jsonpath='{.items[*].metadata.name}')
          if [ -n "$FAILED_PODS" ]; then
            echo "Failed pods found: $FAILED_PODS"
            for pod in $FAILED_PODS; do
              kubectl describe pod $pod
              kubectl logs $pod --all-containers=true --previous
            done
            exit 1
          else
            echo "No failed pods found."
          fi
      - name: Wait for service
        run: |
          echo "Waiting for service to be available..."
          timeout 300s bash -c 'until minikube service fraud-detection-system --url; do sleep 5; done'
          SERVICE_URL=$(minikube service fraud-detection-system --url)
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
      - name: Test service
        run: |
          echo "Testing service at $SERVICE_URL"
          curl -v $SERVICE_URL || echo "Service not responding"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Run integration tests
        run: |
          npm install -g newman@latest
          if [ -f "tests/postman_collection.json" ]; then
            newman run tests/postman_collection.json --env-var "baseUrl=$SERVICE_URL" || echo "Integration tests failed"
          else
            echo "Postman collection not found. Skipping integration tests."
          fi

  notify:
    if: failure()
    needs: 
      - build-and-test
      - security-scan
      - docker-build-push
      - deploy-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Build Notification - Failure in ${{ github.workflow }}
          to: henryleungdemotest@gmail.com
          from: github-actions@gmail.com
          body: |
            Build Notification

            The build has failed in the ${{ github.workflow }} workflow.

            **Repository**: ${{ github.repository }}
            **Branch**: ${{ github.ref }}
            **Commit**: ${{ github.sha }}
            **Commit Message**: ${{ github.event.head_commit.message }}
            **Author**: ${{ github.event.head_commit.author.name }}
            **Build URL**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please check the logs for more details.