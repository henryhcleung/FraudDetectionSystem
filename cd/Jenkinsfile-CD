pipeline {
    agent { label 'microservice-deploy-agent-1' }
    
    parameters {
        string(name: 'BUILD_NUMBER', description: 'Build number to deploy')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Environment to deploy to')
    }
    
    environment {
        KUBERNETES_NAMESPACE = "fraud-detection-${params.ENV}"
        DOCKER_IMAGE = 'fraud-detection-system'
        DOCKER_TAG = "${params.BUILD_NUMBER}-${params.ENV}"
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        KUBE_CONFIG = credentials('kube-config')
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Prepare Deployment') {
            steps {
                script {
                    // Update Kubernetes manifests with the new image tag
                    sh """
                        sed -i 's|image: ${DOCKER_IMAGE}:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|' k8s/deployment.yaml
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kube-config']) {
                    sh """
                        kubectl create namespace ${KUBERNETES_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        kubectl apply -f k8s/configmap.yaml -n ${KUBERNETES_NAMESPACE}
                        kubectl apply -f k8s/deployment.yaml -n ${KUBERNETES_NAMESPACE}
                        kubectl apply -f k8s/service.yaml -n ${KUBERNETES_NAMESPACE}
                        kubectl rollout status deployment/fraud-detection-system -n ${KUBERNETES_NAMESPACE} --timeout=300s
                    """
                }
            }
        }
        
        stage('Run Integration Tests') {
            steps {
                script {
                    echo "Running integration tests for ${params.ENV} environment"
                    // Example: sh "./integration-tests.sh ${params.ENV}"
                }
            }
        }
        
        stage('Smoke Tests') {
            steps {
                script {
                    echo "Running smoke tests for ${params.ENV} environment"
                    // Example: sh "./smoke-tests.sh ${params.ENV}"
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig([credentialsId: 'kube-config']) {
                    sh """
                        kubectl get pods,services,deployments -n ${KUBERNETES_NAMESPACE}
                        kubectl describe deployment fraud-detection-system -n ${KUBERNETES_NAMESPACE}
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "Deployment to ${params.ENV} environment successful!"
        }
        failure {
            echo "Deployment to ${params.ENV} environment failed!"
            mail to: 'henryleunghc@gmail.com',
                 subject: "Failed Deployment: ${currentBuild.fullDisplayName}",
                 body: "Deployment to ${params.ENV} failed. Check ${env.BUILD_URL}"
        }
        always {
            withKubeConfig([credentialsId: 'kube-config']) {
                sh "kubectl get pods,services,deployments -n ${KUBERNETES_NAMESPACE}"
            }
        }
    }
}