pipeline {
    agent { label 'microservice-deploy-agent-1' }
    
    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest-dev', description: 'Docker tag to deploy')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Environment to deploy to')
    }
    
    environment {
        DOCKER_IMAGE = 'fraud-detection-system'
        KUBERNETES_NAMESPACE = "fraud-detection-${params.ENV}"
    }
    
    stages {
        stage('Prepare Deployment') {
            steps {
                script {
                    echo "Preparing to deploy Docker image: ${DOCKER_IMAGE}:${params.DOCKER_TAG} to environment: ${params.ENV}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'KUBE_CONFIG_DATA', variable: 'KUBECONFIG_CONTENT')]) {
                        sh """
                            echo \$KUBECONFIG_CONTENT | base64 --decode > kubeconfig
                            export KUBECONFIG=\$(pwd)/kubeconfig
                            kubectl create namespace ${KUBERNETES_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            kubectl apply -f k8s/configmap.yaml -n ${KUBERNETES_NAMESPACE}
                            kubectl apply -f k8s/deployment.yaml -n ${KUBERNETES_NAMESPACE}
                            kubectl apply -f k8s/service.yaml -n ${KUBERNETES_NAMESPACE}
                            kubectl set image deployment/fraud-detection-system fraud-detection-system=${DOCKER_IMAGE}:${params.DOCKER_TAG} -n ${KUBERNETES_NAMESPACE}
                            kubectl rollout status deployment/fraud-detection-system -n ${KUBERNETES_NAMESPACE} --timeout=300s
                        """
                    }
                }
            }
        }
        
        stage('Post-Deployment Verification') {
            steps {
                script {
                    echo "Verifying deployment in namespace: ${KUBERNETES_NAMESPACE}"
                    def healthCheckUrl = "http://${DOCKER_IMAGE}.${KUBERNETES_NAMESPACE}.svc.cluster.local/actuator/health"
                    def healthStatus = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${healthCheckUrl}", returnStdout: true).trim()
                    if (healthStatus != '200') {
                        error "Health check failed with status code: ${healthStatus}"
                    }
                    echo "Health check passed"
                }
            }
        }
    }
    
    post {
        success {
            echo 'CD pipeline completed successfully!'
            mail to: 'henryleunghc@gmail.com',
                 subject: "Successful Deployment: ${currentBuild.fullDisplayName}",
                 body: "Deployment succeeded for ${env.BUILD_URL}"
        }
        failure {
            echo 'CD pipeline failed!'
            mail to: 'henryleunghc@gmail.com',
                 subject: "Failed Deployment: ${currentBuild.fullDisplayName}",
                 body: "Deployment failed for ${env.BUILD_URL}"
        }
    }
}